setwd("~/Documents/NITPicker")
setwd("~/Documents/NITPicker/SurveyResults/")
setwd("~/Documents/NITPicker/SurveyResults/surveyGraphs")
load("allSurveyResults.RData")
setwd("~/Documents/NITPicker/SurveyResults/")
load("allSurveyResults.RData")
load("allSurveyResults.RData")
geneNames=paste("Gene", c("D", "E", "F", "G"))
counter=1
meanPlots_diff=lapply(allSurveyResults[[1]], function(i){
rbind(i[2,]-i[1,], i[3,]-i[1,])
})
for(i in meanPlots_diff){
plot(c(), c(), xlim=c(0,dim(i)[2]), ylim=c(0, max(i)), main=geneNames[counter], xlab="time", ylab="gene expression")
counter=counter+1
lineTypes=c(1,2,3)
for(j in c(1:dim(i)[1])){
lines(c(1:dim(i)[2]), i[j,], lty=lineTypes[j])
}
abline(v=c(1:dim(i)[2]), col="lightgrey")
readline(prompt="Press [enter] to continue")
}
sapply(c(1:4), function(k){
geneNames=paste("Gene", c("D", "E", "F", "G"))
counter=1
meanPlots_diff=lapply(allSurveyResults[[k]], function(i){
rbind(i[2,]-i[1,], i[3,]-i[1,])
})
for(i in meanPlots_diff){
plot(c(), c(), xlim=c(0,dim(i)[2]), ylim=c(min(i), max(i)), main=geneNames[counter], xlab="time", ylab="gene expression")
counter=counter+1
lineTypes=c(1,2,3)
for(j in c(1:dim(i)[1])){
lines(c(1:dim(i)[2]), i[j,], lty=lineTypes[j])
}
abline(v=c(1:dim(i)[2]), col="lightgrey")
readline(prompt="Press [enter] to continue")
}
})
sapply(c(1:4), function(k){
geneNames=paste("Gene", c("D", "E", "F", "G"))
counter=1
meanPlots_diff=lapply(allSurveyResults[[k]], function(i){
rbind(i[2,]-i[1,], i[3,]-i[1,])
})
for(i in meanPlots_diff){
plot(c(), c(), xlim=c(0,dim(i)[2]), ylim=c(min(i), max(i)), main=geneNames[counter], xlab="time", ylab="gene expression")
counter=counter+1
lineTypes=c(1,2,3)
for(j in c(1:dim(i)[1])){
lines(c(1:dim(i)[2]), i[j,], lty=lineTypes[j])
}
abline(v=c(1:dim(i)[2]), col="lightgrey")
readline(prompt="Press [enter] to continue")
}
})
sapply(c(1:4), function(k){
geneNames=paste("Gene", c("D", "E", "F", "G"))
counter=1
meanPlots_diff=lapply(allSurveyResults[[k]], function(i){
rbind(i[2,]-i[1,], i[3,]-i[1,])
})
for(i in meanPlots_diff){
plot(c(), c(), xlim=c(0,dim(i)[2]), ylim=c(min(i), max(i)), main=geneNames[counter], xlab="time", ylab="gene expression")
counter=counter+1
lineTypes=c(1,2,3)
for(j in c(1:dim(i)[1])){
lines(c(1:dim(i)[2]), i[j,], lty=lineTypes[j])
}
abline(v=c(1:dim(i)[2]), col="lightgrey")
readline(prompt="Press [enter] to continue")
}
})
install.packages("dtw")
library("dtw")
a=dtw(allSurveyResults[[k]][[1]][1,], allSurveyResults[[k]][[1]][2,])
a=dtw(allSurveyResults[[1]][[1]][1,], allSurveyResults[[1]][[1]][2,])
a
a$stepPattern
a$distance
dtwPlot(a)
dtwPlot(a, type="density")
dtwPlotThreeWay(a)
dtwPlotThreeWay(a, allSurveyResults[[1]][[1]][1,], allSurveyResults[[1]][[1]][2,])
allSurveyResults[[1]][[1]][1,]
allSurveyResults[[1]][[1]][2,]
a=dtw(t(allSurveyResults[[1]][[1]][1,]), t(allSurveyResults[[1]][[1]][2,]))
a=dtw(t(allSurveyResults[[1]][[1]][1,]), t(allSurveyResults[[1]][[1]][2,]))
dtwPlotThreeWay(a, t(allSurveyResults[[1]][[1]][1,]), t(allSurveyResults[[1]][[1]][2,])) #, type="density")
dtwPlot(a)
dtwPlot(a, type="density")
a=dtw(t(allSurveyResults[[1]][[1]][1,]), t(allSurveyResults[[1]][[1]][2,]), keep.internals=TRUE)
dtwPlot(a, type="density")
plot(t(allSurveyResults[[1]][[1]][1,]), t(allSurveyResults[[1]][[1]][2,]))
abline(c(0,1))
plot(t(allSurveyResults[[1]][[1]][1,]), t(allSurveyResults[[1]][[1]][3,]))
a=dtw(t(allSurveyResults[[1]][[1]][1,]), t(allSurveyResults[[1]][[1]][3,]), keep.internals=TRUE)
dtwPlotThreeWay(a, t(allSurveyResults[[1]][[1]][1,]), t(allSurveyResplults[[1]][[1]][3,])) #, type="density")
a=dtw(t(allSurveyResults[[1]][[1]][1,]), t(allSurveyResults[[1]][[1]][3,]), keep.internals=TRUE)
dtwPlotThreeWay(a, t(allSurveyResults[[1]][[1]][1,]), t(allSurveyResults[[1]][[1]][3,])) #, type="density")
dtwPlot(a, type="density")
dtwPlotTwoWay(a, t(allSurveyResults[[1]][[1]][1,]), t(allSurveyResults[[1]][[1]][3,])) #, type="density")
dtwPlotTwoWay(a, t(allSurveyResults[[1]][[1]][1,]), t(allSurveyResults[[1]][[1]][2,])) #, type="density")
a=dtw(t(allSurveyResults[[1]][[1]][1,]), t(allSurveyResults[[1]][[1]][3,]))
dtwPlotTwoWay(a, t(allSurveyResults[[1]][[1]][1,]), t(allSurveyResults[[1]][[1]][2,])) #, type="density")
a=dtw(t(allSurveyResults[[1]][[1]][1,]), t(allSurveyResults[[1]][[1]][2,]))
dtwPlotTwoWay(a, t(allSurveyResults[[1]][[1]][1,]), t(allSurveyResults[[1]][[1]][2,])) #, type="density")
a=dtw(t(allSurveyResults[[2]][[1]][1,]), t(allSurveyResults[[2]][[1]][2,]))
dtwPlotTwoWay(a, t(allSurveyResults[[2]][[1]][1,]), t(allSurveyResults[[2]][[1]][2,])) #, type="density")
a=dtw(t(allSurveyResults[[2]][[1]][1,]), t(allSurveyResults[[2]][[1]][3,]))
dtwPlotTwoWay(a, t(allSurveyResults[[2]][[1]][1,]), t(allSurveyResults[[2]][[1]][3,])) #, type="density")
setwd("~/Documents/NITPicker/SurveyResults")
survey=read.table("surveyData_nov_1_2017.txt", sep="\t", header=T)[,1:50]
pie(table(survey[,"level"]))
listOfFields=lapply(survey[,3], function(i){strsplit(as.character(i), ", ")[[1]]})
barplot(table(unlist(listOfFields))/length(listOfFields)*100, ylab="%")
strategies=colnames(survey)[44:50]
strategyCount=sapply(strategies, function(i){
table(survey[,i])/length(survey[,1])*100
})
barplot(strategyCount)
legend(-0.7, 95, c(5:1), fill=grey.colors(5)[5:1])
heatmap.2(apply(survey[,strategies[1:6]], c(1,2), function(i){as.numeric(substring(as.character(i),1,1))}), scale="none", col='bluered', trace="none")
a=apply(survey[,strategies[1:6]], c(1,2), function(i){as.numeric(substring(as.character(i),1,1))})
library("gplot")
library("ggplot")
library("gplots")
heatmap.2(apply(survey[,strategies[1:6]], c(1,2), function(i){as.numeric(substring(as.character(i),1,1))}), scale="none", col='bluered', trace="none")
a=apply(survey[,strategies[1:6]], c(1,2), function(i){as.numeric(substring(as.character(i),1,1))})
par(mar=c(10, 10, 12, 12)+0.1);
par(cex=0.1)
heatmap.2(sapply(strategies[1:6], function(i){sapply(strategies[1:6], function(j){
cor(a[,i], a[,j])
})}), scale="none", col='bluered', trace="none", symm=T, margins=c(9,9))
freqTP_withGrant=sapply(c(1:4), function(i){
sapply(c(1:26), function(j){
length(which(survey[,paste("Q", i, "T", c(1:10), sep="")]==j))
})
})
freqTP_withoutGrant=sapply(c(1:4), function(i){
sapply(c(1:26), function(j){
length(which(survey[,paste("Q", i, "T", c(1:5), sep="")]==j))
})
})
#read in all the perturbation sets
files=paste("simulateSkewedNormal_", c("mean", "stdev", "skew", "amp"), "_inputs.txt", sep="")
perturbations=lapply(files, function(i){
a=read.table(i, header=T)
a=a[,c(1,2,seq(3, 80, 3))]
a
})
names(perturbations)=c("mean", "stdev", "skew", "amp")
#first 4 genes from mean
meanPlots=lapply(c(1:4), function(geneID){
perturbations[["mean"]][which(perturbations[["mean"]][,"GeneID"]==geneID),c(3:length(perturbations[["mean"]][1,]))]
})
pertType=1
setwd("~/Documents/NITPicker/SurveyResults/surveyGraphs")
#read in all the perturbation sets
files=paste("simulateSkewedNormal_", c("mean", "stdev", "skew", "amp"), "_inputs.txt", sep="")
perturbations=lapply(files, function(i){
a=read.table(i, header=T)
a=a[,c(1,2,seq(3, 80, 3))]
a
})
names(perturbations)=c("mean", "stdev", "skew", "amp")
#first 4 genes from mean
meanPlots=lapply(c(1:4), function(geneID){
perturbations[["mean"]][which(perturbations[["mean"]][,"GeneID"]==geneID),c(3:length(perturbations[["mean"]][1,]))]
})
pertType=1
geneNames=paste("Gene", c("D", "E", "F", "G"))
counter=1
for(i in meanPlots){
plot(c(), c(), xlim=c(0,dim(i)[2]), ylim=c(0, max(i)), main=geneNames[counter], xlab="time", ylab="gene expression")
counter=counter+1
lineTypes=c(1,2,3)
for(j in c(1:dim(i)[1])){
lines(c(1:dim(i)[2]), i[j,], lty=lineTypes[j])
}
abline(v=c(1:dim(i)[2]), col="lightgrey")
abline(v=c(1:dim(i)[2])[which(freqTP_withGrant[,pertType]>25)], col="red")
}
plot(freqTP_withGrant[,pertType], col="blue", type="l", ylim=c(0,50), xlab="time", ylab="# survey participants")
lines(freqTP_withoutGrant[,pertType])
abline(v=c(1:dim(i)[2]), col="lightgrey")
abline(v=c(1:dim(i)[2])[which(freqTP_withGrant[,pertType]>25)], col="red")
source("https://bioconductor.org/biocLite.R")
biocLite("MyPackage")
biocLite("NITPicker")
biocLite("NITPickervtyifyifytrsy")
biocLite("NITPicker")
biocLite("NITPicker")
